@page "/login"

@attribute [AllowAnonymous]

@inject NavigationManager Navigation
@inject IJwtAuthService AuthService
@inject IToastService Notification
@layout AuthLayout

<PageTitle>Login</PageTitle>

<div class="card col-md-6 offset-3" style="margin: auto">
    <div class="card-header">
        <h3 class="text-center fw-bold text-primary">Enter your credentials to login</h3>
    </div>
    <div class="card-body">
        <EditForm Model="@LoginData" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary style="color:indianred" Model="@LoginData" />

            <div class="form-group mt-2">
                <label for="Email" class="form-label">Email Address</label>
                <InputText id="Email" @bind-Value="@LoginData.Email" class="form-control"></InputText>
                <ValidationMessage For="() => LoginData.Email"></ValidationMessage>
            </div>

            <div class="form-group mt-2">
                <label for="Password" class="form-label">Password</label>
                <InputText type="password" id="Password" @bind-Value="LoginData.Password" class="form-control"></InputText>
                <ValidationMessage For="() => LoginData.Password"></ValidationMessage>
            </div>

            <div class="form-group mt-2">
                <button class="btn btn-outline-primary float-end" disabled="@IsSubmitDisabled" type="submit">Log in</button>
            </div>
        </EditForm>
    </div>
</div>
<div class="row justify-content-center" style="margin: 10px">
    <NavLink class="nav-link d-block mx-auto text-center" href="@RegistrationPage.Path">
        Don't have an account? Register here
    </NavLink>
</div>


@code 
{
    public const string Path = "/login";
    public LoginDto LoginData { get; set; } = new();
    public bool IsSubmitDisabled;

    public async Task HandleSubmit()
    {
        IsSubmitDisabled = true;
        var loginResult = await AuthService!.LoginAsync(LoginData);
        if (loginResult is not null)
        {
            Notification!.ShowError(loginResult.Message);
            IsSubmitDisabled = false;
        }
        else
        {
            Navigation!.NavigateTo("/", true);
        }
    }
}